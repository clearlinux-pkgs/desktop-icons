From d4503bf63853e1393adfe516fea8ed8b21cda4e8 Mon Sep 17 00:00:00 2001
From: Carlos Soriano <csoriano@redhat.com>
Date: Tue, 11 Dec 2018 13:42:33 +0100
Subject: [PATCH 46/55] desktopGrid: Constrain grid to workarea

The main actor is a stack widget, meaning, we use it so we can have
a stack of the grid with icons with floating actors such as the rename
popover.

To achieve that, the FixedLayout of clutter is used. However, that
layout doesn't allocate children based on its size or aligment. So to
perform proper layouting we need to constraint the actual grid size
and not the fixed layout actor.

What happened as consequence is that the icons had the wrong
coordinates asigned, since allocation of the main actor is not dependent
of its descendents.

To fix it, we apply the constraint of the workarea to the grid directly.

Thanks Sergio for the investigation and partial implementation for this!
---
 desktopGrid.js    | 8 +++++---
 desktopManager.js | 8 ++------
 2 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/desktopGrid.js b/desktopGrid.js
index ec5b2f3..2ac89c6 100644
--- a/desktopGrid.js
+++ b/desktopGrid.js
@@ -101,7 +101,7 @@ var DesktopGrid = class {
             index: monitorIndex,
             work_area: true
         });
-        this.actor.add_constraint(this._monitorConstraint);
+        this._grid.add_constraint(this._monitorConstraint);
 
         this._addDesktopBackgroundMenu();
 
@@ -115,6 +115,8 @@ var DesktopGrid = class {
 
         this._grid.connect('key-press-event', this._onKeyPress.bind(this));
 
+        this._grid.connect('allocation-changed', () => Extension.desktopManager.scheduleReLayoutChildren());
+
         this.reset();
     }
 
@@ -476,7 +478,7 @@ var DesktopGrid = class {
             let controlPressed = !!(event.get_state() & Clutter.ModifierType.CONTROL_MASK);
             if (!shiftPressed && !controlPressed)
                 Extension.desktopManager.clearSelection();
-            let [gridX, gridY] = this.actor.get_transformed_position();
+            let [gridX, gridY] = this._grid.get_transformed_position();
             Extension.desktopManager.startRubberBand(x, y, gridX, gridY);
             return Clutter.EVENT_STOP;
         }
@@ -515,7 +517,7 @@ var DesktopGrid = class {
     acceptDrop(source, actor, x, y, time) {
         /* Coordinates are relative to the grid, we want to transform them to
          * absolute coordinates to work across monitors */
-        let [gridX, gridY] = this.actor.get_transformed_position();
+        let [gridX, gridY] = this._grid.get_transformed_position();
         let [absoluteX, absoluteY] = [x + gridX, y + gridY];
         return Extension.desktopManager.acceptDrop(absoluteX, absoluteY);
     }
diff --git a/desktopManager.js b/desktopManager.js
index 7060a6a..8f10f19 100644
--- a/desktopManager.js
+++ b/desktopManager.js
@@ -218,11 +218,7 @@ var DesktopManager = GObject.registerClass({
             return;
         }
 
-        Object.values(this._desktopGrids).forEach(grid => {
-            grid.actor.connect('allocation-changed', () => this._scheduleLayoutChildren());
-        });
-
-        this._scheduleReLayoutChildren();
+        this.scheduleReLayoutChildren();
     }
 
     _enumerateDesktop() {
@@ -564,7 +560,7 @@ var DesktopManager = GObject.registerClass({
         this._layoutChildrenId = GLib.idle_add(GLib.PRIORITY_LOW, () => this._layoutChildren());
     }
 
-    _scheduleReLayoutChildren() {
+    scheduleReLayoutChildren() {
         if (this._layoutChildrenId != 0)
             return;
 
-- 
2.20.0

