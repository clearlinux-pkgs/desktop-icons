From 60c7cf87553f867360fa3b459b93661abd4cec5f Mon Sep 17 00:00:00 2001
From: Iain Lane <iainl@gnome.org>
Date: Mon, 10 Dec 2018 14:45:33 +0000
Subject: [PATCH 44/55] desktopManager, fileItem: Don't launch if desktop or
 file can be written by others

This was flagged up by security; in this case it would be possible for
someone to swap out a trusted desktop file and still get it executed.
---
 desktopIconsUtil.js |  4 +--
 desktopManager.js   | 83 +++++++++++++++++++++++++++++++++++++++++----
 fileItem.js         | 23 ++++++++++---
 3 files changed, 97 insertions(+), 13 deletions(-)

diff --git a/desktopIconsUtil.js b/desktopIconsUtil.js
index c32c319..4b426a9 100644
--- a/desktopIconsUtil.js
+++ b/desktopIconsUtil.js
@@ -25,7 +25,7 @@ const Prefs = Me.imports.prefs;
 const TERMINAL_SCHEMA = 'org.gnome.desktop.default-applications.terminal';
 const EXEC_KEY = 'exec';
 
-var DEFAULT_ATTRIBUTES = 'metadata::*,standard::*,access::*,time::modified';
+var DEFAULT_ATTRIBUTES = 'metadata::*,standard::*,access::*,time::modified,unix::mode';
 
 function getDesktopDir() {
     let desktopPath = GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DESKTOP);
@@ -57,4 +57,4 @@ function getExtraFolders() {
         extraFolders.push([Gio.File.new_for_uri('trash:///'), Prefs.FILE_TYPE.USER_DIRECTORY_TRASH]);
     }
     return extraFolders;
-}
\ No newline at end of file
+}
diff --git a/desktopManager.js b/desktopManager.js
index ebfb8d7..7060a6a 100644
--- a/desktopManager.js
+++ b/desktopManager.js
@@ -17,6 +17,7 @@
  */
 
 const Clutter = imports.gi.Clutter;
+const GObject = imports.gi.GObject;
 const Gio = imports.gi.Gio;
 const GLib = imports.gi.GLib;
 const Lang = imports.lang;
@@ -24,8 +25,6 @@ const St = imports.gi.St;
 const Mainloop = imports.mainloop;
 const Meta = imports.gi.Meta;
 
-const Signals = imports.signals;
-
 const Animation = imports.ui.animation;
 const Background = imports.ui.background;
 const DND = imports.ui.dnd;
@@ -44,6 +43,8 @@ const DesktopIconsUtil = Me.imports.desktopIconsUtil;
 const Clipboard = St.Clipboard.get_default();
 const CLIPBOARD_TYPE = St.ClipboardType.CLIPBOARD;
 
+var S_IWOTH = 0x00002;
+
 function getDpy() {
     return global.screen || global.display;
 }
@@ -53,8 +54,20 @@ function findMonitorIndexForPos(x, y) {
 }
 
 
-var DesktopManager = class {
-    constructor() {
+var DesktopManager = GObject.registerClass({
+    Properties: {
+        'writable-by-others': GObject.ParamSpec.boolean(
+            'writable-by-others',
+            'WritableByOthers',
+            'Whether the desktop\'s directory can be written by others (o+w unix permission)',
+            GObject.ParamFlags.READABLE,
+            false
+        )
+    }
+}, class DesktopManager extends GObject.Object {
+    _init(params) {
+        super._init(params);
+
         this._layoutChildrenId = 0;
         this._scheduleDesktopsRefreshId = 0;
         this._monitorDesktopDir = null;
@@ -63,6 +76,9 @@ var DesktopManager = class {
         this._fileItemHandlers = new Map();
         this._fileItems = new Map();
         this._dragCancelled = false;
+        this._queryFileInfoCancellable = null;
+        this._unixMode = null;
+        this._writableByOthers = null;
 
         this._monitorsChangedId = Main.layoutManager.connect('monitors-changed', () => this._recreateDesktopIcons());
         this._rubberBand = new St.Widget({ style_class: 'rubber-band' });
@@ -70,6 +86,9 @@ var DesktopManager = class {
         Main.layoutManager.uiGroup.add_actor(this._rubberBand);
         this._grabHelper = new GrabHelper.GrabHelper(global.stage);
 
+        if (this.writableByOthers)
+            log(`desktop-icons: Desktop is writable by others - will not allow launching any desktop files`);
+
         this._addDesktopIcons();
         this._monitorDesktopFolder();
 
@@ -175,6 +194,15 @@ var DesktopManager = class {
         this._fileItemHandlers = new Map();
         this._fileItems = new Map();
 
+        if (!this._unixMode) {
+            let desktopDir = DesktopIconsUtil.getDesktopDir();
+            let fileInfo = desktopDir.query_info(Gio.FILE_ATTRIBUTE_UNIX_MODE,
+                                                 Gio.FileQueryInfoFlags.NONE,
+                                                 null);
+            this._unixMode = fileInfo.get_attribute_uint32(Gio.FILE_ATTRIBUTE_UNIX_MODE);
+            this._setWritableByOthers((this._unixMode & S_IWOTH) != 0);
+        }
+
         try {
             for (let [file, info, extra] of await this._enumerateDesktop()) {
                 let fileItem = new FileItem.FileItem(file, info, extra);
@@ -248,6 +276,18 @@ var DesktopManager = class {
         return false;
     }
 
+    get writableByOthers() {
+        return this._writableByOthers;
+    }
+
+    _setWritableByOthers(value) {
+        if (value == this._writableByOthers)
+            return;
+
+        this._writableByOthers = value
+        this.notify('writable-by-others');
+    }
+
     _updateDesktopIfChanged (file, otherFile, eventType) {
         let {
             DELETED, MOVED_IN, MOVED_OUT, CREATED, RENAMED, CHANGES_DONE_HINT, ATTRIBUTE_CHANGED
@@ -265,7 +305,34 @@ var DesktopManager = class {
                 return;
             case CHANGES_DONE_HINT:
             case ATTRIBUTE_CHANGED:
-                // FIXME: ATTRIBUTE_CHANGED wasn't managed in the old code; in the future, it must be managed
+                /* a file changed, rather than the desktop itself */
+                let desktopDir = DesktopIconsUtil.getDesktopDir();
+                if (file.get_uri() != desktopDir.get_uri())
+                    return;
+
+                if (this._queryFileInfoCancellable)
+                    this._queryFileInfoCancellable.cancel();
+
+                file.query_info_async(Gio.FILE_ATTRIBUTE_UNIX_MODE,
+                                      Gio.FileQueryInfoFlags.NONE,
+                                      GLib.PRIORITY_DEFAULT,
+                                      this._queryFileInfoCancellable,
+                    (source, res) => {
+                        try {
+                            let info = source.query_info_finish(res);
+                            this._queryFileInfoCancellable = null;
+
+                            this._unixMode = info.get_attribute_uint32(Gio.FILE_ATTRIBUTE_UNIX_MODE);
+                            this._setWritableByOthers((this._unixMode & S_IWOTH) != 0);
+
+                            if (this.writableByOthers)
+                                log(`desktop-icons: Desktop is writable by others - will not allow launching any desktop files`);
+                        } catch(error) {
+                            if (!error.matches(Gio.IOErrorEnum, Gio.IOErrorEnum.CANCELLED))
+                                global.log('Error getting desktop unix mode: ' + error);
+                        }
+                    });
+
                 return;
         }
 
@@ -635,11 +702,13 @@ var DesktopManager = class {
 
         this._rubberBand.destroy();
 
+        if (this._queryFileInfoCancellable)
+            this._queryFileInfoCancellable.cancel();
+
         Object.values(this._desktopGrids).forEach(grid => grid.actor.destroy());
         this._desktopGrids = {}
     }
-};
-Signals.addSignalMethods(DesktopManager.prototype);
+});
 
 function forEachBackgroundManager(func) {
     Main.layoutManager._bgManagers.forEach(func);
diff --git a/fileItem.js b/fileItem.js
index e86536b..74816bf 100644
--- a/fileItem.js
+++ b/fileItem.js
@@ -49,6 +49,7 @@ const _ = Gettext.gettext;
 const DRAG_TRESHOLD = 8;
 
 var S_IXUSR = 0o00100;
+var S_IWOTH = 0o00002;
 
 var State = {
     NORMAL: 0,
@@ -160,6 +161,12 @@ var FileItem = class {
                 }
             });
         }
+
+        Extension.desktopManager.connect('notify::writable-by-others', () => {
+            if (!this._isDesktopFile)
+                return;
+            this._refreshMetadataAsync(true);
+        });
     }
 
     _onDestroy() {
@@ -215,19 +222,23 @@ var FileItem = class {
     _updateMetadataFromFileInfo(fileInfo) {
         this._fileInfo = fileInfo;
 
-        let oldDisplayName = this.displayName;
+        let oldLabelText = this._label.text;
 
         this._displayName = fileInfo.get_attribute_as_string('standard::display-name');
         this._attributeCanExecute = fileInfo.get_attribute_boolean('access::can-execute');
         this._unixmode = fileInfo.get_attribute_uint32('unix::mode')
+        this._writableByOthers = (this._unixmode & S_IWOTH) != 0;
         this._trusted = fileInfo.get_attribute_as_string('metadata::trusted') == 'true';
         this._attributeContentType = fileInfo.get_content_type();
         this._isDesktopFile = this._attributeContentType == 'application/x-desktop';
 
+        if (this._isDesktopFile && this._writableByOthers)
+            log(`desktop-icons: File ${this._displayName} is writable by others - will not allow launching`);
+
         if (this._isDesktopFile)
             this._desktopFile = Gio.DesktopAppInfo.new_from_filename(this._file.get_path());
 
-        if (this.displayName != oldDisplayName) {
+        if (this.displayName != oldLabelText) {
             this._label.text = this.displayName;
         }
 
@@ -539,7 +550,7 @@ var FileItem = class {
             if (!this.trustedDesktopFile)
                 this._menu.addAction(_('Rename'), () => this.doRename());
             this._actionTrash = this._menu.addAction(_('Move to Trash'), () => this._onMoveToTrashClicked());
-            if (this._isDesktopFile) {
+            if (this._isDesktopFile && !Extension.desktopManager.writableByOthers && !this._writableByOthers) {
                 this._menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
                 this._allowLaunchingMenuItem = this._menu.addAction(this._allowLaunchingText,
                                                                     () => this._onAllowDisallowLaunchingClicked());
@@ -717,7 +728,11 @@ var FileItem = class {
     }
 
     get trustedDesktopFile() {
-        return this._isDesktopFile && this._attributeCanExecute && this.metadataTrusted;
+        return this._isDesktopFile &&
+               this._attributeCanExecute &&
+               this.metadataTrusted &&
+               !Extension.desktopManager.writableByOthers &&
+               !this._writableByOthers;
     }
 
     get displayName() {
-- 
2.20.0

