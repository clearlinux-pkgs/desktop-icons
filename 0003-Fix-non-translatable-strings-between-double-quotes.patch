From 592cef68b1f6616be8ec2a910d98ddb54f3fe4bd Mon Sep 17 00:00:00 2001
From: Sergio Costas <raster@rastersoft.com>
Date: Thu, 22 Nov 2018 01:18:07 +0100
Subject: [PATCH 03/55] Fix non-translatable strings between double quotes

The Gnome coding style specify that only translatable strings must use
double quotes, while all non-translatable strings must use single quotes.
But the current code contains several non-translatable strings enclosed
in double quoted, and also some translatable strings with single quotes.

This patch fixed that, ensuring consistency with the Gnoem coding style.
---
 desktopGrid.js      | 22 +++++++++++-----------
 desktopIconsUtil.js |  6 +++---
 desktopManager.js   |  6 +++---
 fileItem.js         | 20 ++++++++++----------
 prefs.js            | 28 ++++++++++++++--------------
 5 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/desktopGrid.js b/desktopGrid.js
index 6e27b9f..3e09df4 100644
--- a/desktopGrid.js
+++ b/desktopGrid.js
@@ -45,8 +45,8 @@ const Clipboard = St.Clipboard.get_default();
 const CLIPBOARD_TYPE = St.ClipboardType.CLIPBOARD;
 const Gettext = imports.gettext;
 
-Gettext.textdomain("desktop-icons");
-Gettext.bindtextdomain("desktop-icons", ExtensionUtils.getCurrentExtension().path + "/locale");
+Gettext.textdomain('desktop-icons');
+Gettext.bindtextdomain('desktop-icons', ExtensionUtils.getCurrentExtension().path + '/locale');
 
 const _ = Gettext.gettext;
 
@@ -301,18 +301,18 @@ var DesktopGrid = class {
     _createDesktopBackgroundMenu() {
         let menu = new PopupMenu.PopupMenu(Main.layoutManager.dummyCursor,
                                            0, St.Side.TOP);
-        menu.addAction(_('New Folder'), () => this._omNewFolderClicked());
+        menu.addAction(_("New Folder"), () => this._omNewFolderClicked());
         menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
-        this._pasteMenuItem = menu.addAction(_('Paste'), () => this._onPasteClicked());
-        this._undoMenuItem = menu.addAction(_('Undo'), () => this._onUndoClicked());
-        this._redoMenuItem = menu.addAction(_('Redo'), () => this._onRedoClicked());
+        this._pasteMenuItem = menu.addAction(_("Paste"), () => this._onPasteClicked());
+        this._undoMenuItem = menu.addAction(_("Undo"), () => this._onUndoClicked());
+        this._redoMenuItem = menu.addAction(_("Redo"), () => this._onRedoClicked());
         menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
-        menu.addAction(_('Open Desktop in Files'), () => this._onOpenDesktopInFilesClicked());
-        menu.addAction(_('Open Terminal'), () => this._onOpenTerminalClicked());
+        menu.addAction(_("Open Desktop in Files"), () => this._onOpenDesktopInFilesClicked());
+        menu.addAction(_("Open Terminal"), () => this._onOpenTerminalClicked());
         menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem());
-        menu.addSettingsAction(_('Change Background…'), 'gnome-background-panel.desktop');
-        menu.addSettingsAction(_('Display Settings'), 'gnome-display-panel.desktop');
-        menu.addSettingsAction(_('Settings'), 'gnome-control-center.desktop');
+        menu.addSettingsAction(_("Change Background…"), 'gnome-background-panel.desktop');
+        menu.addSettingsAction(_("Display Settings"), 'gnome-display-panel.desktop');
+        menu.addSettingsAction(_("Settings"), 'gnome-control-center.desktop');
 
         menu.actor.add_style_class_name('background-menu');
 
diff --git a/desktopIconsUtil.js b/desktopIconsUtil.js
index 08d9736..c32c319 100644
--- a/desktopIconsUtil.js
+++ b/desktopIconsUtil.js
@@ -50,11 +50,11 @@ function distanceBetweenPoints(x, y, x2, y2) {
 
 function getExtraFolders() {
     let extraFolders = new Array();
-    if (Prefs.settings.get_boolean("show-home")) {
+    if (Prefs.settings.get_boolean('show-home')) {
         extraFolders.push([Gio.File.new_for_commandline_arg(GLib.get_home_dir()), Prefs.FILE_TYPE.USER_DIRECTORY_HOME]);
     }
-    if (Prefs.settings.get_boolean("show-trash")) {
-        extraFolders.push([Gio.File.new_for_uri("trash:///"), Prefs.FILE_TYPE.USER_DIRECTORY_TRASH]);
+    if (Prefs.settings.get_boolean('show-trash')) {
+        extraFolders.push([Gio.File.new_for_uri('trash:///'), Prefs.FILE_TYPE.USER_DIRECTORY_TRASH]);
     }
     return extraFolders;
 }
\ No newline at end of file
diff --git a/desktopManager.js b/desktopManager.js
index c668b87..2b9c1da 100644
--- a/desktopManager.js
+++ b/desktopManager.js
@@ -73,7 +73,7 @@ var DesktopManager = class {
         this._addDesktopIcons();
         this._monitorDesktopFolder();
 
-        Prefs.settings.connect("changed", () => this._recreateDesktopIcons());
+        Prefs.settings.connect('changed', () => this._recreateDesktopIcons());
 
         this._selection = new Set();
         this._inDrag = false;
@@ -146,7 +146,7 @@ var DesktopManager = class {
     _addDesktopIcons() {
         forEachBackgroundManager(bgManager => {
             let newGrid = new DesktopGrid.DesktopGrid(bgManager);
-            newGrid.actor.connect("destroy", (actor) => {
+            newGrid.actor.connect('destroy', (actor) => {
                 // if a grid loses its actor, remove it from the grid list
                 for(let grid in this._desktopGrids)
                     if (this._desktopGrids[grid].actor == actor) {
@@ -257,7 +257,7 @@ var DesktopManager = class {
         if (children.some(x => x.child == child))
             return desktopGrid;
         else
-            throw new Error("Missmatch between expected items in a desktop grid not found");
+            throw new Error('Missmatch between expected items in a desktop grid not found');
     }
 
     _setupDnD() {
diff --git a/fileItem.js b/fileItem.js
index b5c5a05..f927efa 100644
--- a/fileItem.js
+++ b/fileItem.js
@@ -44,8 +44,8 @@ const DesktopIconsUtil = Me.imports.desktopIconsUtil;
 
 const Gettext = imports.gettext;
 
-Gettext.textdomain("desktop-icons");
-Gettext.bindtextdomain("desktop-icons", ExtensionUtils.getCurrentExtension().path + "/locale");
+Gettext.textdomain('desktop-icons');
+Gettext.bindtextdomain('desktop-icons', ExtensionUtils.getCurrentExtension().path + '/locale');
 
 const _ = Gettext.gettext;
 
@@ -85,7 +85,7 @@ var FileItem = class {
         this._isSymlink = fileInfo.get_is_symlink();
         this._fileUri = this._file.get_uri();
         this._filePath = this._file.get_path();
-        this._modifiedTime = this._fileInfo.get_attribute_uint64("time::modified");
+        this._modifiedTime = this._fileInfo.get_attribute_uint64('time::modified');
         this._state = State.NORMAL;
         this._displayName = fileInfo.get_attribute_as_string('standard::display-name');
 
@@ -162,7 +162,7 @@ var FileItem = class {
                 }
             });
         }
-        this.actor.connect("destroy", () => this._onDestroy());
+        this.actor.connect('destroy', () => this._onDestroy());
     }
 
     _onDestroy() {
@@ -201,7 +201,7 @@ var FileItem = class {
                                                                  this._modifiedTime)) {
                     let argv = [];
                     argv.push(GLib.build_filenamev([ExtensionUtils.getCurrentExtension().path,
-                                                   "createThumbnail.js"]));
+                                                   'createThumbnail.js']));
                     argv.push(this._filePath);
                     let [success, pid] = GLib.spawn_async(null, argv, null,
                                                           GLib.SpawnFlags.SEARCH_PATH | GLib.SpawnFlags.DO_NOT_REAP_CHILD, null);
@@ -213,7 +213,7 @@ var FileItem = class {
                             if (exitCode == 0)
                                 this._updateIcon();
                             else
-                                global.log("Failed to generate thumbnail for " + this._filePath);
+                                global.log('Failed to generate thumbnail for ' + this._filePath);
                             GLib.spawn_close_pid(pid);
                             return false;
                         }
@@ -253,7 +253,7 @@ var FileItem = class {
                             }
                         } catch (error) {
                             if (!error.matches(Gio.IOErrorEnum, Gio.IOErrorEnum.CANCELLED)) {
-                                global.log("Error while loading thumbnail: " + error);
+                                global.log('Error while loading thumbnail: ' + error);
                                 this._icon.child = this._createEmblemedStIcon(this._fileInfo.get_icon(), null);
                             }
                         }
@@ -262,7 +262,7 @@ var FileItem = class {
             }
         }
 
-        if (this._isDesktopFile && this._desktopFile.has_key("Icon"))
+        if (this._isDesktopFile && this._desktopFile.has_key('Icon'))
             this._icon.child = this._createEmblemedStIcon(null, this._desktopFile.get_string('Icon'));
         else
             this._icon.child = this._createEmblemedStIcon(this._fileInfo.get_icon(), null);
@@ -284,7 +284,7 @@ var FileItem = class {
                     this._updateIcon();
                 } catch(error) {
                     if (!error.matches(Gio.IOErrorEnum, Gio.IOErrorEnum.CANCELLED))
-                        global.log("Error getting the number of files in the trash: " + error);
+                        global.log('Error getting the number of files in the trash: ' + error);
                 }
             });
 
@@ -308,7 +308,7 @@ var FileItem = class {
         }
         let itemIcon = Gio.EmblemedIcon.new(icon, null);
         if (this._isSymlink)
-            itemIcon.add_emblem(Gio.Emblem.new(Gio.ThemedIcon.new("emblem-symbolic-link")));
+            itemIcon.add_emblem(Gio.Emblem.new(Gio.ThemedIcon.new('emblem-symbolic-link')));
 
         return new St.Icon({ gicon: itemIcon,
                              icon_size: Prefs.get_icon_size()
diff --git a/prefs.js b/prefs.js
index 6759d2e..0e98c08 100644
--- a/prefs.js
+++ b/prefs.js
@@ -24,22 +24,22 @@ const GioSSS = Gio.SettingsSchemaSource;
 const ExtensionUtils = imports.misc.extensionUtils;
 const Gettext = imports.gettext;
 
-Gettext.textdomain("desktop-icons");
-Gettext.bindtextdomain("desktop-icons", ExtensionUtils.getCurrentExtension().path + "/locale");
+Gettext.textdomain('desktop-icons');
+Gettext.bindtextdomain('desktop-icons', ExtensionUtils.getCurrentExtension().path + '/locale');
 
 var _ = Gettext.gettext;
 
-const SCHEMA_NAUTILUS = "org.gnome.nautilus.preferences";
+const SCHEMA_NAUTILUS = 'org.gnome.nautilus.preferences';
 const SCHEMA = 'org.gnome.shell.extensions.desktop-icons';
 
-const ICON_SIZE = { "small": 48, "standard": 64, "large": 96, "huge": 128 };
-const ICON_WIDTH = { "small": 120, "standard": 128, "large": 128, "huge": 140 };
-const ICON_HEIGHT = { "small": 98, "standard": 114, "large": 146, "huge": 178 };
+const ICON_SIZE = { 'small': 48, 'standard': 64, 'large': 96, 'huge': 128 };
+const ICON_WIDTH = { 'small': 120, 'standard': 128, 'large': 128, 'huge': 140 };
+const ICON_HEIGHT = { 'small': 98, 'standard': 114, 'large': 146, 'huge': 178 };
 
 var FILE_TYPE = {
     NONE: null,
-    USER_DIRECTORY_HOME: "show-home",
-    USER_DIRECTORY_TRASH: "show-trash",
+    USER_DIRECTORY_HOME: 'show-home',
+    USER_DIRECTORY_TRASH: 'show-trash',
 }
 
 var nautilusSettings;
@@ -86,7 +86,7 @@ function buildPrefsWidget() {
 
     let frame = new Gtk.Box({ orientation: Gtk.Orientation.VERTICAL, border_width: 10, spacing: 10 });
 
-    frame.add(buildSelector('icon-size', _("Size for the desktop icons"), { "small": _("Small"), "standard": _("Standard"), "large": _("Large"), "huge": _("Huge")}));
+    frame.add(buildSelector('icon-size', _("Size for the desktop icons"), { 'small': _("Small"), 'standard': _("Standard"), 'large': _("Large"), 'huge': _("Huge")}));
     frame.add(buildSwitcher('show-home', _("Show the personal folder in the desktop")));
     frame.add(buildSwitcher('show-trash', _("Show the trash icon in the desktop")));
     frame.show_all();
@@ -120,7 +120,7 @@ function buildSelector(key, labelText, elements) {
     let combo = new Gtk.ComboBox({model: listStore});
     let rendererText = new Gtk.CellRendererText();
     combo.pack_start (rendererText, false);
-    combo.add_attribute (rendererText, "text", 0);
+    combo.add_attribute (rendererText, 'text', 0);
     combo.set_id_column(1);
     settings.bind(key, combo, 'active-id', 3);
     hbox.pack_start(label, true, true, 0);
@@ -129,18 +129,18 @@ function buildSelector(key, labelText, elements) {
 }
 
 function _onNautilusSettingsChanged() {
-    CLICK_POLICY_SINGLE = nautilusSettings.get_string("click-policy") == "single";
+    CLICK_POLICY_SINGLE = nautilusSettings.get_string('click-policy') == 'single';
 }
 
 function get_icon_size() {
     // this one doesn't need scaling because Gnome Shell automagically scales the icons
-    return ICON_SIZE[settings.get_string("icon-size")];
+    return ICON_SIZE[settings.get_string('icon-size')];
 }
 
 function get_desired_width(scale_factor) {
-    return ICON_WIDTH[settings.get_string("icon-size")] * scale_factor;
+    return ICON_WIDTH[settings.get_string('icon-size')] * scale_factor;
 }
 
 function get_desired_height(scale_factor) {
-    return ICON_HEIGHT[settings.get_string("icon-size")] * scale_factor;
+    return ICON_HEIGHT[settings.get_string('icon-size')] * scale_factor;
 }
-- 
2.20.0

